version: '3'

tasks:
  prepare:
    silent: true
    cmds: 
      - |
        #!/bin/bash
        set -e

        # Define output file
        OUTPUT_FILE="skaffold-auto.yaml"

        # read the configuration file
        namespace=$( tomlq -r '.build.cluster.namespace' project.toml )
        service_account=$( tomlq -r '.build.cluster.serviceAccount' project.toml )
        secret=$( tomlq -r '.build.container.secret' project.toml )
        registry=$( tomlq -r '.build.container.registry' project.toml )

        # Create base YAML structure using yq
        enamespace=$namespace eservice_account=$service_account esecret=$secret yq eval -n '
          .apiVersion = "skaffold/v4beta9" |
          .kind = "Config" |
          .build.tagPolicy.sha256 = {} |
          .build.cluster.namespace = env(enamespace) |
          .build.cluster.serviceAccount = env(eservice_account) |
          .build.cluster.volumes = [{
            "name": env(esecret),
            "secret": {
              "secretName": env(esecret),
              "items": [{"key": ".dockerconfigjson", "path": "config.json"}]
            }
          }] |
          .build.artifacts = []
        ' > "$OUTPUT_FILE"

        # Function to generate an artifact block using yq
        generate_artifact() {
            local tool="$1"
            local tool_path="$2"

            etool=$tool etool_path=$tool_path eregistry=$registry esecret=$secret yq e -n '
              .image = "\(env(eregistry))/\(env(etool))" |
              .context = env(etool_path) |
              .kaniko.volumeMounts = [{"name": env(esecret), "mountPath": "kaniko/.docker"}]'
        }

        #generate_artifact "etool" "etoolpath"

        # Extract tools from project.toml and append them dynamically
        tomlq -r '.tools | to_entries | .[] | "\(.key) \(.value.context)"' project.toml | while read -r tool tool_path; do
            t=$( generate_artifact "$tool" "$tool_path" )
            coso=$t yq eval -P ".build.artifacts += env(coso)" -i "$OUTPUT_FILE"
        done

        echo "âœ… Skaffold configuration generated in $OUTPUT_FILE"
  build:
    silent: true
    cmds:
      - defer: rm -fr skaffold-auto.yaml
      - |
        echo "ðŸš€ Building images with Skaffold..."
        skaffold build -f skaffold-auto.yaml -v=error -q > build.json 2>/dev/null
        echo "âœ… Images built successfully"
  update: 
    silent: true
    cmds:
      #- defer: rm -fr build.json
      - |
        echo "ðŸš€ Updating CWL files with the new images..."
        for cwl in $(tomlq -r '.workflows[].path' project.toml); do
          path=$( echo $cwl | cut -d'#' -f1 )
          i=0
          tomlq -r '.tools | keys[]' project.toml | while read -r tool; do
            img=$( cat build.json | index=$i yq ".builds[env(index)].tag")
            img=$( echo $img | sed -E 's/:latest(@sha256:)/\1/' )
            i=$((i+1))
            s="${tool}" t="${img}" yq -i eval '(.$graph[] | select (.id == env(s)) ).hints.DockerRequirement.dockerPull = env(t)' -i $path
            s="${tool}" t="${img}" yq -i eval '(.$graph[] | select (.id == env(s)) ).requirements.DockerRequirement.dockerPull = env(t)' -i $path
          done
        done
        echo "âœ… CWL workflow updated successfully"
