version: '3'

includes:
  remote: https://raw.githubusercontent.com/fabricebrito/eoap-taskfile/refs/heads/main/task-files/Taskfile.yaml

tasks:
  build:
  - task: remote:prepare
  - task: remote:build
  - task: remote:update

  prepare:
  - task: remote:prepare

  test:
  - task: remote:test

  test-all:
    cmds: 
    - |
      #!/bin/bash
        set -e
        echo "ðŸš€ Running tests"
        i=0
        tomlq -c '.tools[]' project.toml | while read -r tool; do
          echo $tool
          path=$( echo $tool | jq -r .path)

          echo "tool path: $path"
          tests=$( echo $tool | jq -r .tests )
          echo $tests
          if [ "$tests" != "null" ]; then
            j=0
            # iterate over the tests
            echo "$tool" | jq -c '.tests[]' | while read -r test; do

              name=$(echo $test | jq -r .name)
              description=$(echo $test | jq -r .description )
              
              echo "Test Name: $name"
              echo "Description: $description"
              echo "---------------------------"
              # write params to a file
              echo $test | jq -r .params > params.yaml

              volume=$( echo $test | jq -r .execution.volume)

              cmd=$(printf "%s\n" "calrissian \
              --stdout ${volume}/$(echo "$test" | jq -r .execution.paths.stdout) \
              --stderr ${volume}/$(echo "$test" | jq -r .execution.paths.stderr) \
              --max-ram $(echo "$test" | jq -r .execution.max_ram) \
              --max-cores \"$(echo "$test" | jq -r .execution.max_cores)\" \
              --tmp-outdir-prefix ${volume}/$(echo "$test" | jq -r .execution.paths.tmp_outdir_prefix)/ \
              --outdir ${volume}/$(echo "$test" | jq -r .execution.paths.outdir) \
              --usage-report ${volume}/$(echo "$test" | jq -r .execution.paths.usage_report) \
              --tool-logs-basepath ${volume}/$(echo "$test" | jq -r .execution.paths.tool_logs_basepath) \
              --pod-serviceaccount $(echo "$test" | jq -r .execution.pod_serviceaccount) \
              ${path} \
              params.yaml")
              echo $cmd  

              #eval $cmd
              j=$((j+1))
            done
          fi

          i=$((i+1))
        done
        echo "âœ… Tests passed"    

  test-crop:
    cmds:
      - |
        #!/bin/bash
        set -e
        echo "ðŸš€ Running tests"
        i=0
        tomlq -c '.tools.crop' project.toml | while read -r tool; do
          echo $tool
          path=$( echo $tool | jq -r .path)

          echo "tool path: $path"
          tests=$( echo $tool | jq -r .tests )
          echo $tests
          if [ "$tests" != "null" ]; then
            j=0
            # iterate over the tests
            echo "$tool" | jq -c '.tests[]' | while read -r test; do

              name=$(echo $test | jq -r .name)
              description=$(echo $test | jq -r .description )
              
              echo "Test Name: $name"
              echo "Description: $description"
              echo "---------------------------"
              # write params to a file
              echo $test | jq -r .params > params.yaml

              volume=$( echo $test | jq -r .execution.volume)

              cmd=$(printf "%s\n" "calrissian \
              --stdout ${volume}/$(echo "$test" | jq -r .execution.paths.stdout) \
              --stderr ${volume}/$(echo "$test" | jq -r .execution.paths.stderr) \
              --max-ram $(echo "$test" | jq -r .execution.max_ram) \
              --max-cores \"$(echo "$test" | jq -r .execution.max_cores)\" \
              --tmp-outdir-prefix ${volume}/$(echo "$test" | jq -r .execution.paths.tmp_outdir_prefix)/ \
              --outdir ${volume}/$(echo "$test" | jq -r .execution.paths.outdir) \
              --usage-report ${volume}/$(echo "$test" | jq -r .execution.paths.usage_report) \
              --tool-logs-basepath ${volume}/$(echo "$test" | jq -r .execution.paths.tool_logs_basepath) \
              --pod-serviceaccount $(echo "$test" | jq -r .execution.pod_serviceaccount) \
              ${path} \
              params.yaml")
              echo $cmd  

              #eval $cmd
              j=$((j+1))
            done
          fi

          i=$((i+1))
        done
        echo "âœ… Tests passed"    