name: build

on:
  push:
    branches:
      - feature-375
      - main
    paths:
      - 'command-line-tools/**'
      - .github/**
      - docs/**
      - cwl-workflow/*.cwl
      - codemeta.json

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install cwltool
      - run: cwltool --validate cwl-workflow/app-water-bodies-cloud-native.cwl
      - run: cwltool --validate cwl-workflow/app-water-body-cloud-native.cwl
      - run: cwltool --validate cwl-workflow/app-water-body.cwl

  version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "APP_VERSION=$(jq -r .version codemeta.json)" >> $GITHUB_ENV
      - run: echo app version is $APP_VERSION
      - id: set-version
        run: echo "::set-output name=version::$APP_VERSION"

  container-build:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        step: [crop, norm_diff, otsu, stac, stage]
    steps:
      - uses: actions/checkout@v2
      - run: echo version ${{ needs.version.outputs.app-version }}
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: build & push image
        run: |
          IMAGE_ID=ghcr.io/eoap/advanced-tooling/${{ matrix.step }}
          docker build command-line-tools/${{ matrix.step }} \
            --file command-line-tools/${{ matrix.step }}/Dockerfile \
            --tag ${{ matrix.step }}
          docker tag ${{ matrix.step }} $IMAGE_ID:${{ needs.version.outputs.app-version }}
          docker push $IMAGE_ID:${{ needs.version.outputs.app-version }}

  publish-oci-artifact:
    needs:
      - container-build
      - version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install oras and syft
        run: |
          ORAS_VERSION="1.2.2"
          curl -sL "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz" | tar -xz oras
          sudo mv oras /usr/local/bin/
          SYFT_VERSION="1.27.1"
          curl -sL "https://github.com/anchore/syft/releases/latest/download/syft_${SYFT_VERSION}_linux_amd64.tar.gz" | tar -xz syft
          sudo mv syft /usr/local/bin/

      - name: Authenticate with GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Prepare CWL files and metadata
        run: |
          VERSION="${{ needs.version.outputs.app-version }}"
          mkdir -p downloads sboms

          for step in crop norm_diff otsu stac
          do
            tag="ghcr.io/eoap/advanced-tooling/${step}:${VERSION}"
            docker pull "$tag"
            digest=$(docker inspect "$tag" | yq -r '.[0]["RepoDigests"][0]')
            for cwl in cwl-workflow/*.cwl
            do
              s="${step}" t="${digest}" yq -i eval '(.$graph[] | select (.id == env(s)) ).hints.DockerRequirement.dockerPull = env(t)' "$cwl"
            done
          done

          for cwl in $(ls cwl-workflow/*.cwl)
          do
            r=$( cat codemeta.json | jq -r ".codeRepository" ) yq -i eval '."s:codeRepository" = {"URL" : env(r)}' $cwl
            v="${{needs.version.outputs.app-version}}" yq -i eval '."s:softwareVersion" = env(v)' $cwl
            n=$(cat codemeta.json | jq -r '(.author[0].givenName + " " + .author[0].familyName)') \
            e=$(cat codemeta.json | jq -r '.author[0].email') \
            a=$(cat codemeta.json | jq -r '.author[0].affiliation["name"]') \
            yq eval -i  '."s:author" += [{"class": "s:Person", "s.name": env(n), "s.email": env(e), "s.affiliation": env(a)}]' $cwl
          done

          for cwl in cwl-workflow/*.cwl
          do
            base=$(basename "$cwl" .cwl)
            cp "$cwl" "downloads/${base}.${VERSION}.cwl"
          done

      - name: Push OCI artifacts and attach SBOMs
        run: |
          VERSION="${{ needs.version.outputs.app-version }}"
          OWNER_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          set -x
          for file in downloads/*.cwl
          do
            base=$(basename "$file" .${VERSION}.cwl)
            ref="ghcr.io/${OWNER_REPO}/${base}:${VERSION}"

            echo "📦 Pushing $file as OCI artifact to $ref"
            oras push "$ref" --artifact-type application/cwl "$file":application/cwl

            echo "🔍 Extracting image references from $file"
            images=$(yq e '
              .["$graph"][] 
              | select(.class == "CommandLineTool") 
              | (.hints.DockerRequirement.dockerPull // .requirements.DockerRequirement.dockerPull)
            ' "$file")

            for image in $images
            do
              safe_name=$(echo "$image" | tr '/@:' '___')
              sbom_file="sboms/$safe_name.sbom.spdx.json"

              echo "🛠 Generating SBOM for $image"
              syft "$image" -o spdx-json > "$sbom_file"

              echo "📎 Attaching SBOM for $image to $ref"
              oras attach "$ref" --artifact-type application/spdx+json "$sbom_file"
            done
          done
