name: build

on:
  push:
    branches:
      - feature-375
      - main
    paths:
      - 'command-line-tools/**'
      - .github/**
      - docs/**
      - cwl-workflow/*.cwl
      - codemeta.json

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install cwltool
      - run: cwltool --validate cwl-workflow/app-water-bodies-cloud-native.cwl
      - run: cwltool --validate cwl-workflow/app-water-body-cloud-native.cwl
      - run: cwltool --validate cwl-workflow/app-water-body.cwl

  version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "APP_VERSION=$(cat codemeta.json | jq -r .version )" >> $GITHUB_ENV
      - run: echo app version is $APP_VERSION
      - id: set-version
        run: echo "::set-output name=version::$APP_VERSION"

  container-build:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        step: [crop, norm_diff, otsu, stac, stage]
    steps:
      - uses: actions/checkout@v2
      - run: echo version ${{needs.version.outputs.app-version}}
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: build & push image
        run: |
          IMAGE_ID=ghcr.io/eoap/advanced-tooling/${{ matrix.step }}
          docker build command-line-tools/${{ matrix.step }} --file command-line-tools/${{ matrix.step }}/Dockerfile --tag ${{ matrix.step }}
          docker tag ${{ matrix.step }} $IMAGE_ID:${{needs.version.outputs.app-version}}
          docker push $IMAGE_ID:${{needs.version.outputs.app-version}}

  create-release:
    needs:
      - container-build
      - version
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.set-upload-url.outputs.upload_url }}
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{needs.version.outputs.app-version}}
          tag_name: ${{needs.version.outputs.app-version}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - id: set-upload-url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  publish-artifacts:
    needs:
      - create-release
      - version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        step: ["app-water-bodies-cloud-native", "app-water-body-cloud-native", "app-water-body"]
    steps:
      - uses: actions/checkout@v2
      - run: |
          for step in crop norm_diff otsu stac
          do
            tag="ghcr.io/eoap/advanced-tooling/${step}:${{needs.version.outputs.app-version}}"
            docker pull ${tag}
            shatag=$( docker inspect ${tag} | yq -r '.[0]["RepoDigests"][0]' )
            for cwl in $(ls cwl-workflow/*.cwl)
            do
              s="${step}" t="${shatag}" yq -i eval '(.$graph[] | select (.id == env(s)) ).hints.DockerRequirement.dockerPull = env(t)' $cwl
            done
          done
      - run: |
          for cwl in $(ls cwl-workflow/*.cwl)
          do
            r=$( cat codemeta.json | jq -r ".codeRepository" ) yq -i eval '."s:codeRepository" = {"URL" : env(r)}' $cwl
            v="${{needs.version.outputs.app-version}}" yq -i eval '."s:softwareVersion" = env(v)' $cwl
            n=$(cat codemeta.json | jq -r '(.author[0].givenName + " " + .author[0].familyName)') \
            e=$(cat codemeta.json | jq -r '.author[0].email') \
            a=$(cat codemeta.json | jq -r '.author[0].affiliation["name"]') \
            yq eval -i  '."s:author" += [{"class": "s:Person", "s.name": env(n), "s.email": env(e), "s.affiliation": env(a)}]' $cwl
          done
      - name: Cleanup downloads folder
        run: rm -rf downloads/*
      - run: |
          mkdir downloads
          for cwl in "app-water-bodies-cloud-native" "app-water-body-cloud-native" "app-water-body"
          do
            cp cwl-workflow/${cwl}.cwl downloads/${cwl}.${{needs.version.outputs.app-version}}.cwl
          done
      - uses: actions/upload-artifact@v4
        with:
          name: application-package-${{matrix.step}}
          path: downloads
          overwrite: true
      - name: upload linux artifact 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: downloads/${{matrix.step}}.${{needs.version.outputs.app-version}}.cwl
          asset_name: ${{matrix.step}}.${{needs.version.outputs.app-version}}.cwl
          asset_content_type: text/yaml

  publish-oci-artifact:
    needs:
      - publish-artifacts
      - version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        step: ["app-water-bodies-cloud-native", "app-water-body-cloud-native", "app-water-body"]
    steps:
      - uses: actions/checkout@v2

      - name: Install oras and syft
        run: |
          ORAS_VERSION="1.2.2"
          curl -sL "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz" | tar -xz oras
          sudo mv oras /usr/local/bin/
          SYFT_VERSION="1.27.1"
          curl -sL "https://github.com/anchore/syft/releases/latest/download/syft_${SYFT_VERSION}_linux_amd64.tar.gz" | tar -xz syft
          sudo mv syft /usr/local/bin/

      - name: Authenticate with GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | oras login --identity-token-stdin ghcr.io

      - name: Prepare directories
        run: mkdir -p sboms downloads

      - name: Set file variables
        run: |
          VERSION=${{ needs.version.outputs.app-version }}
          OWNER_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "CWL_FILE=downloads/${{ matrix.step }}.${VERSION}.cwl" >> $GITHUB_ENV
          echo "IMAGE_REF=ghcr.io/${OWNER_REPO}/${{ matrix.step }}:${VERSION}" >> $GITHUB_ENV

      - name: Push CWL OCI artifact
        run: |
          oras push "${{ env.IMAGE_REF }}" \
            --artifact-type application/cwl \
            "${{ env.CWL_FILE }}":application/cwl

      - name: Extract dockerPull image refs and generate SBOMs
        run: |
          IMAGES=$(yq e '
            .["$graph"][] 
            | select(.class == "CommandLineTool") 
            | (.hints.DockerRequirement.dockerPull // .requirements.DockerRequirement.dockerPull)
          ' "${{ env.CWL_FILE }}")

          for image in $IMAGES; do
            safe_name=$(echo "$image" | tr '/@:' '___')
            sbom_file="sboms/$safe_name.sbom.spdx.json"

            echo "Generating SBOM for $image â†’ $sbom_file"
            syft "$image" -o spdx-json > "$sbom_file"

            echo "Attaching SBOM to CWL artifact..."
            oras attach "${{ env.IMAGE_REF }}" \
              --artifact-type application/spdx+json \
              "$sbom_file"
          done

      - name: Show attached SBOMs
        run: ls -lh sboms
